import pandas as pdimport streamlit as stimport plotly.express as pximport plotly.graph_objects as goimport jsonfrom datetime import datetime, timedeltaimport os# Set page configst.set_page_config(    page_title="Nifty Trading Agent Dashboard",    page_icon="ðŸ“ˆ",    layout="wide")# Function to load trade historydef load_trade_history(file_path='trading_history.json'):    if os.path.exists(file_path):        with open(file_path, 'r') as f:            history = json.load(f)        return pd.DataFrame(history)    return pd.DataFrame(columns=['timestamp', 'symbol', 'action', 'quantity', 'price', 'status'])# Function to load portfolio datadef load_portfolio(file_path='portfolio.json'):    if os.path.exists(file_path):        with open(file_path, 'r') as f:            portfolio = json.load(f)                    # Convert to dataframe format        portfolio_data = []        for symbol, data in portfolio.items():            data['symbol'] = symbol            portfolio_data.append(data)                return pd.DataFrame(portfolio_data)    return pd.DataFrame(columns=['symbol', 'quantity', 'average_price', 'last_price', 'pnl'])# Load datatrade_history = load_trade_history()portfolio = load_portfolio()# Titlest.title("Nifty 50 AI Trading Dashboard")# Date filterst.sidebar.header("Date Range")default_start_date = datetime.now() - timedelta(days=30)default_end_date = datetime.now()start_date = st.sidebar.date_input("Start Date", default_start_date)end_date = st.sidebar.date_input("End Date", default_end_date)# If we have trade data, filter by dateif not trade_history.empty:    trade_history['timestamp'] = pd.to_datetime(trade_history['timestamp'])    trade_history = trade_history[(trade_history['timestamp'].dt.date >= start_date) &                                  (trade_history['timestamp'].dt.date <= end_date)]# Dashboard layoutcol1, col2 = st.columns(2)# Trade Summarywith col1:    st.header("Trading Summary")        if not trade_history.empty:        # Count trades by action        buy_count = trade_history[trade_history['action'] == 'BUY'].shape[0]        sell_count = trade_history[trade_history['action'] == 'SELL'].shape[0]                # Create metrics        st.metric("Total Trades", len(trade_history))                # Trade type breakdown        trade_type_data = {            'Action': ['BUY', 'SELL'],            'Count': [buy_count, sell_count]        }        fig = px.pie(trade_type_data, values='Count', names='Action',                      title='Trade Distribution', color='Action',                     color_discrete_map={'BUY': 'green', 'SELL': 'red'})        st.plotly_chart(fig)                # Trades over time        daily_trades = trade_history.resample('D', on='timestamp').size()        daily_trades_df = daily_trades.reset_index()        daily_trades_df.columns = ['Date', 'Number of Trades']                fig = px.line(daily_trades_df, x='Date', y='Number of Trades',                      title='Daily Trading Activity')        st.plotly_chart(fig)    else:        st.info("No trade history available for the selected period")# Portfolio Performancewith col2:    st.header("Portfolio Performance")        if not portfolio.empty:        # Total value and P&L        total_value = (portfolio['quantity'] * portfolio['last_price']).sum()        total_investment = (portfolio['quantity'] * portfolio['average_price']).sum()        total_pnl = total_value - total_investment        pnl_percentage = (total_pnl / total_investment * 100) if total_investment > 0 else 0                # Metrics        st.metric("Portfolio Value", f"â‚¹{total_value:,.2f}")        st.metric("Total P&L", f"â‚¹{total_pnl:,.2f}", f"{pnl_percentage:.2f}%")                # Portfolio composition        portfolio['position_value'] = portfolio['quantity'] * portfolio['last_price']        portfolio['percentage'] = portfolio['position_value'] / total_value * 100                fig = px.bar(portfolio, x='symbol', y='position_value',                     title='Portfolio Composition',                    color='pnl', color_continuous_scale=['red', 'green'])        st.plotly_chart(fig)                # Performance by stock        portfolio['pnl_percentage'] = ((portfolio['last_price'] / portfolio['average_price']) - 1) * 100                fig = px.bar(portfolio, x='symbol', y='pnl_percentage',                    title='Performance by Stock (%)',                    color='pnl_percentage', color_continuous_scale=['red', 'yellow', 'green'],                    text_auto='.2f')        fig.update_traces(texttemplate='%{text}%', textposition='outside')        st.plotly_chart(fig)    else:        st.info("No portfolio data available")# Recent Trading Activityst.header("Recent Trading Activity")if not trade_history.empty:    st.dataframe(trade_history.sort_values('timestamp', ascending=False).head(10))else:    st.info("No trade history available")# AI Trading Agent Performancest.header("AI Agent Performance")# Load agent metrics (placeholder)# In a real implementation, you would track metrics like:# - Prediction accuracy# - Win/loss ratio# - Average holding period# - Trading frequency# Placeholder for agent metricsagent_metrics = {    'Date': pd.date_range(end=datetime.now(), periods=30),    'Accuracy': [60 + (i % 20) for i in range(30)],  # Random values between 60-80%    'Win_Ratio': [50 + (i % 25) for i in range(30)]  # Random values between 50-75%}agent_metrics_df = pd.DataFrame(agent_metrics)# Display agent metricscol1, col2 = st.columns(2)with col1:    fig = px.line(agent_metrics_df, x='Date', y='Accuracy',                 title='AI Prediction Accuracy (%)')    st.plotly_chart(fig)with col2:    fig = px.line(agent_metrics_df, x='Date', y='Win_Ratio',                 title='Win/Loss Ratio (%)')    st.plotly_chart(fig)# Notes on integrating with live datast.sidebar.header("Notes")st.sidebar.info("""    **Dashboard Integration:**        In a production environment, this dashboard should read data directly from:        1. Your trading database containing all executed trades    2. Zerodha's API for live portfolio data    3. The agent's decision logs to track performance metrics        **Suggested Improvements:**    - Track prediction accuracy over time    - Compare performance to Nifty 50 benchmark    - Calculate Sharpe ratio and other risk metrics    - Add alerting for unusual trading patterns""")