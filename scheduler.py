import timeimport scheduleimport loggingimport osfrom datetime import datetime, timedeltafrom nifty_claude_trader import NiftyClaudeTrader# Configure logginglogging.basicConfig(    level=logging.INFO,    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',    filename='trading_scheduler.log')logger = logging.getLogger('TradingScheduler')# Configure your credentialsCLAUDE_API_KEY = os.environ.get("CLAUDE_API_KEY", "your_claude_api_key_here")ZERODHA_ENCTOKEN = os.environ.get("ZERODHA_ENCTOKEN", "your_enctoken_here")# Function to refresh enctoken (this token expires daily)def refresh_enctoken():    # In a production system, you'd implement a method to get a fresh enctoken    # This might involve using Selenium to automate login or a custom approach    logger.info("Attempting to refresh Zerodha enctoken")    # Implementation would go here    return ZERODHA_ENCTOKEN# Function to run the trading agentdef run_trading_job():    try:        current_time = datetime.now()        logger.info(f"Starting scheduled trading job at {current_time}")                # Check if it's a weekday and market hours (9:15 AM to 3:30 PM IST)        if current_time.weekday() >= 5:  # 5=Saturday, 6=Sunday            logger.info("Weekend - markets closed")            return                    # Get a fresh enctoken        enctoken = refresh_enctoken()                # Initialize the trading agent        agent = NiftyClaudeTrader(            claude_api_key=CLAUDE_API_KEY,            enctoken=enctoken        )                # Define which stocks to trade        # Option 1: Use all Nifty 50 stocks        # stocks = agent.nifty50_symbols                # Option 2: Use a subset of Nifty 50 stocks        stocks = ["RELIANCE", "TCS", "HDFCBANK", "ICICIBANK", "INFY",                  "SBIN", "HINDUNILVR", "BAJFINANCE", "BHARTIARTL", "ASIANPAINT"]                # Run the trading cycle        result = agent.run_trading_cycle(symbols=stocks)                # Log the results        if result["status"] == "completed":            trades = result.get("trades", [])            if trades:                logger.info(f"Executed {len(trades)} trades:")                for trade in trades:                    logger.info(f"  {trade['action']} {trade['quantity']} {trade['symbol']}")            else:                logger.info("No trades executed in this cycle")        else:            logger.info(f"Trading cycle status: {result['status']}")                except Exception as e:        logger.error(f"Error in trading job: {e}")# Schedule the trading job# Morning analysis and trading (9:30 AM IST)schedule.every().day.at("04:00").do(run_trading_job)  # 9:30 AM IST = 4:00 AM UTC# Mid-day update (12:30 PM IST)schedule.every().day.at("07:00").do(run_trading_job)  # 12:30 PM IST = 7:00 AM UTC# Closing analysis (3:00 PM IST, before market close)schedule.every().day.at("09:30").do(run_trading_job)  # 3:00 PM IST = 9:30 AM UTCif __name__ == "__main__":    logger.info("Starting trading scheduler")        # Run the job once at startup    run_trading_job()        # Then run according to schedule    while True:        schedule.run_pending()        time.sleep(60)  # Check every minute